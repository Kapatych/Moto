{"version":3,"sources":["../node_modules/reselect/es/index.js","selectors/index.js","components/catalog/catalog-item.js","components/catalog/catalog-filter-section.js","components/catalog/catalog-filter.js","components/catalog/catalog-sort.js","components/catalog/catalog.js","containers/catalog-page.js","components/sizes/index.js","components/colors/index.js"],"names":["defaultEqualityCheck","a","b","areArgumentsShallowlyEqual","equalityCheck","prev","next","length","i","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","join","Error","createSelector","memoize","_len","arguments","memoizeOptions","_key","_len2","_key2","recomputations","resultFunc","pop","memoizedResultFunc","apply","undefined","concat","selector","params","push","resetRecomputations","createSelectorCreator","func","lastArgs","lastResult","getActiveCategoryId","state","catalog","categories","activeFilters","category","allCategories","categoryUrl","categoryName","split","find","item","name","toLowerCase","id","getActiveHelmets","helmets","search","allHelmets","activeCategoryId","activeSearch","result","filter","title","includes","helmet","indexOf","getFilters","filters","brand","color","size","colors","sizes","getFilteredHelmets","sort","activeHelmets","activeBrand","activeColor","activeSize","activeSort","price","CatalogItem","thumb","img","urlPath","className","to","src","alt","CatalogFilterSection","children","type","resetFilter","onClick","value","CatalogFilter","addProductFilter","setMobileSidebar","idx","itemClass","classNames","key","items","selected","onClickFunction","CatalogSort","changeSortType","onChange","e","target","Catalog","showMore","allPages","Math","ceil","currentPage","useState","mobileSidebar","slice","CatalogPage","this","props","fetchHelmets","fetchCategories","activeCategory","match","fetchActiveCategory","prevProps","location","pathname","clearSearch","deleteAllFilters","isLoading","isError","filteredHelmets","Component","mapDispatchToProps","compose","withRouter","connect","Sizes","data-size","Colors","data-color"],"mappings":"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","file":"static/js/5.872c0abe.chunk.js","sourcesContent":["function defaultEqualityCheck(a, b) {\n  return a === b;\n}\n\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n  var length = prev.length;\n\n  for (var i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function defaultMemoize(func) {\n  var equalityCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultEqualityCheck;\n  var lastArgs = null;\n  var lastResult = null; // we reference arguments instead of spreading them for performance reasons\n\n  return function () {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = func.apply(null, arguments);\n    }\n\n    lastArgs = arguments;\n    return lastResult;\n  };\n}\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep;\n    }).join(', ');\n    throw new Error('Selector creators expect all input-selectors to be functions, ' + ('instead received the following types: [' + dependencyTypes + ']'));\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptions[_key - 1] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var recomputations = 0;\n    var resultFunc = funcs.pop();\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(undefined, [function () {\n      recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(memoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function () {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      return memoizedResultFunc.apply(null, params);\n    });\n    selector.resultFunc = resultFunc;\n    selector.dependencies = dependencies;\n\n    selector.recomputations = function () {\n      return recomputations;\n    };\n\n    selector.resetRecomputations = function () {\n      return recomputations = 0;\n    };\n\n    return selector;\n  };\n}\nexport var createSelector = createSelectorCreator(defaultMemoize);\nexport function createStructuredSelector(selectors) {\n  var selectorCreator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createSelector;\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + ('where each property is a selector, instead received a ' + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  return selectorCreator(objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n}","import {createSelector} from \"reselect\";\r\n\r\nexport const getAllHelmets = (state) => {\r\n    return state.catalog.helmets;\r\n};\r\n\r\nconst getAllCategories = (state) => {\r\n    return state.catalog.categories;\r\n};\r\n\r\nconst getActiveCategory = (state) => {\r\n    return state.activeFilters.category;\r\n};\r\n\r\nconst getActiveSearch = (state) => {\r\n    return state.activeFilters.search.toLowerCase()\r\n};\r\n\r\nconst getActiveBrand = (state) => {\r\n    return state.activeFilters.brand\r\n};\r\n\r\nconst getActiveColor = (state) => {\r\n    return state.activeFilters.color\r\n};\r\n\r\nconst getActiveSize = (state) => {\r\n    return state.activeFilters.size\r\n};\r\n\r\nconst getActiveSort = (state) => {\r\n    return state.activeFilters.sort\r\n};\r\n\r\nexport const getActiveCategoryId = createSelector(\r\n    [getAllCategories, getActiveCategory],\r\n    (allCategories, categoryUrl) => {\r\n        const categoryName = categoryUrl.split('-').join(' ');\r\n        const category = allCategories.find((item) => item.name.toLowerCase() === categoryName) || {};\r\n\r\n        return category.id;\r\n    }\r\n);\r\n\r\nexport const getActiveHelmets = createSelector(\r\n    [getAllHelmets, getActiveCategoryId, getActiveSearch],\r\n    (allHelmets, activeCategoryId, activeSearch) => {\r\n        let result = allHelmets.filter( item => item.title.toLowerCase().includes(activeSearch));\r\n        if (activeCategoryId) {\r\n            result = result.filter((helmet) => helmet.categories.indexOf(activeCategoryId) !== -1);\r\n        }\r\n        return result\r\n    }\r\n);\r\n\r\nexport const getFilters = createSelector(\r\n    [getActiveHelmets],\r\n    (helmets) => {\r\n\r\n        let filters = {\r\n            brand: [],\r\n            color: [],\r\n            size: []\r\n        };\r\n\r\n        helmets.map((helmet) => {\r\n\r\n            if (filters.brand.indexOf(helmet.brand) === -1) {\r\n                filters.brand.push(helmet.brand)\r\n            }\r\n\r\n            for (let i = 0; i < helmet.colors.length; i++) {\r\n                if (filters.color.indexOf(helmet.colors[i]) === -1) {\r\n                    filters.color.push(helmet.colors[i])\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < helmet.sizes.length; i++) {\r\n                if (filters.size.indexOf(helmet.sizes[i]) === -1) {\r\n                    filters.size.push(helmet.sizes[i])\r\n                }\r\n            }\r\n            return filters;\r\n        });\r\n\r\n        return filters;\r\n    }\r\n);\r\n\r\nexport const getFilteredHelmets = createSelector(\r\n    [getActiveHelmets, getActiveBrand, getActiveColor, getActiveSize, getActiveSort],\r\n    (activeHelmets, activeBrand, activeColor, activeSize, activeSort) => {\r\n        let result = activeHelmets;\r\n\r\n        if (activeBrand.length !== 0) {\r\n            result = result.filter((item) => activeBrand.indexOf(item.brand) !== -1)\r\n        }\r\n\r\n        if (activeColor.length !== 0) {\r\n            result = result.filter((item) => {\r\n                for (let i = 0; i < item.colors.length; i++) {\r\n                    if (activeColor.indexOf(item.colors[i]) !== -1) return true;\r\n                }\r\n                return false;\r\n            })\r\n        }\r\n\r\n        if (activeSize.length !== 0) {\r\n            result = result.filter((item) => {\r\n                for (let i = 0; i < item.sizes.length; i++) {\r\n                    if (activeSize.indexOf(item.sizes[i]) !== -1) return true;\r\n                }\r\n                return false;\r\n            })\r\n        }\r\n\r\n        switch (activeSort) {\r\n            case 'titleASC':\r\n                return result.sort((a, b) => (a.title > b.title) ? 1 : -1);\r\n            case 'titleDESC':\r\n                return result.sort((a, b) => (a.title < b.title) ? 1 : -1);\r\n            case 'priceDESC':\r\n                return result.sort((a, b) => b.price - a.price);\r\n            default:\r\n                return result.sort((a, b) => a.price - b.price);\r\n        }\r\n\r\n    }\r\n);\r\n\r\n/*export const getHelmetsFilters = createSelector(\r\n    [getHelmets, getActiveCategoryId],\r\n    (helmets, activeCategoryId) => {\r\n\r\n        let filters = {\r\n            brand: [],\r\n            color: [],\r\n            size: []\r\n        };\r\n\r\n        let activeHelmets;\r\n\r\n        if (activeCategoryId) {\r\n            activeHelmets = helmets.filter((helmet) => helmet.categories.indexOf(activeCategoryId) !== -1);\r\n        } else {\r\n            activeHelmets = [...helmets]\r\n        }\r\n\r\n        activeHelmets.map((helmet) => {\r\n\r\n            if (filters.brand.indexOf(helmet.brand) === -1) {\r\n                filters.brand.push(helmet.brand)\r\n            }\r\n\r\n            for (let i = 0; i < helmet.colors.length; i++) {\r\n                if (filters.color.indexOf(helmet.colors[i]) === -1) {\r\n                    filters.color.push(helmet.colors[i])\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < helmet.sizes.length; i++) {\r\n                if (filters.size.indexOf(helmet.sizes[i]) === -1) {\r\n                    filters.size.push(helmet.sizes[i])\r\n                }\r\n            }\r\n            return filters;\r\n        });\r\n\r\n        return filters;\r\n    }\r\n);\r\n\r\nexport const getFilteredHelmets = (helmets, activeFilters, state) => {\r\n    let result = [...helmets];\r\n\r\n    const activeCategoryId = getActiveCategoryId(state);\r\n\r\n    if (activeCategoryId) {\r\n        result = result.filter((item) => item.categories.indexOf(activeCategoryId) !== -1)\r\n    }\r\n\r\n    if (activeFilters.brand.length !== 0) {\r\n        result = result.filter((item) => activeFilters.brand.indexOf(item.brand) !== -1)\r\n    }\r\n\r\n    if (activeFilters.color.length !== 0) {\r\n        result = result.filter((item) => {\r\n            for (let i = 0; i < item.colors.length; i++) {\r\n                if (activeFilters.color.indexOf(item.colors[i]) !== -1) return true;\r\n            }\r\n            return false;\r\n        })\r\n    }\r\n\r\n    if (activeFilters.size.length !== 0) {\r\n        result = result.filter((item) => {\r\n            for (let i = 0; i < item.sizes.length; i++) {\r\n                if (activeFilters.size.indexOf(item.sizes[i]) !== -1) return true;\r\n            }\r\n            return false;\r\n        })\r\n    }\r\n\r\n    switch (activeFilters.sort) {\r\n        case 'titleASC':\r\n            return result.sort((a, b) => (a.title > b.title) ? 1 : -1);\r\n        case 'titleDESC':\r\n            return result.sort((a, b) => (a.title < b.title) ? 1 : -1);\r\n        case 'priceDESC':\r\n            return result.sort((a, b) => b.price - a.price);\r\n        default:\r\n            return result.sort((a, b) => a.price - b.price);\r\n    }\r\n};*/\r\n\r\n/*export const getActiveHelmets = (state) => {\r\n    //all\r\n    const all = getAllHelmets(state);\r\n    //search\r\n    const search = state.activeFilters.search.toLowerCase();\r\n    let result = all.filter( item => item.title.toLowerCase().includes(search));\r\n    //category\r\n    const activeCategoryID = getActiveCategoryId(state);\r\n    if (activeCategoryID) {\r\n        result = result.filter((helmet) => helmet.categories.indexOf(activeCategoryID) !== -1);\r\n    }\r\n    return result\r\n};*/\r\n\r\n/*export const getFilteredHelmets = (state) => {\r\n\r\n    let result = getActiveHelmets(state);\r\n\r\n    if (state.activeFilters.brand.length !== 0) {\r\n        result = result.filter((item) => state.activeFilters.brand.indexOf(item.brand) !== -1)\r\n    }\r\n\r\n    if (state.activeFilters.color.length !== 0) {\r\n        result = result.filter((item) => {\r\n            for (let i = 0; i < item.colors.length; i++) {\r\n                if (state.activeFilters.color.indexOf(item.colors[i]) !== -1) return true;\r\n            }\r\n            return false;\r\n        })\r\n    }\r\n\r\n    if (state.activeFilters.size.length !== 0) {\r\n        result = result.filter((item) => {\r\n            for (let i = 0; i < item.sizes.length; i++) {\r\n                if (state.activeFilters.size.indexOf(item.sizes[i]) !== -1) return true;\r\n            }\r\n            return false;\r\n        })\r\n    }\r\n\r\n    switch (state.activeFilters.sort) {\r\n        case 'titleASC':\r\n            return result.sort((a, b) => (a.title > b.title) ? 1 : -1);\r\n        case 'titleDESC':\r\n            return result.sort((a, b) => (a.title < b.title) ? 1 : -1);\r\n        case 'priceDESC':\r\n            return result.sort((a, b) => b.price - a.price);\r\n        default:\r\n            return result.sort((a, b) => a.price - b.price);\r\n    }\r\n};*/\r\n\r\n","import React from 'react';\r\nimport './catalog-item.scss';\r\nimport {Link} from \"react-router-dom\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CatalogItem = ({helmet}) => {\r\n    const {title, price, img: {thumb}} = helmet;\r\n\r\n    const urlPath = title.split(' ').join('-');\r\n\r\n    return (\r\n        <div className='catalog__item'>\r\n            <div className='catalog__item-cover'>\r\n                <Link to={`/catalog/${urlPath}`}>\r\n                    <img src={thumb} alt=\"product-thumb\"/>\r\n                </Link>\r\n\r\n            </div>\r\n            <div className='catalog__item-details'>\r\n                <Link to={`/catalog/${urlPath}`}>\r\n                    <div className='catalog__item-title'>{title}</div>\r\n                </Link>\r\n                <div className='catalog__item-price price'>${price}</div>\r\n\r\n            </div>\r\n            <Link to={`/catalog/${urlPath}`} className='catalog__item-button button'>Buy now</Link>\r\n        </div>\r\n    )\r\n};\r\n\r\nCatalogItem.propTypes = {\r\n    helmet: PropTypes.object,\r\n};\r\n\r\nexport default CatalogItem;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './catalog-filter-section.scss';\r\n\r\nconst CatalogFilterSection = ({children, type, activeFilters, resetFilter}) => {\r\n    return (\r\n        <div className='filter__section'>\r\n            <div className='filter__section-header'>\r\n                <div className='filter__section-title title'>{`${type}s`}</div>\r\n                {activeFilters[type].length > 0 &&\r\n                <div className='filter__section-reset link'\r\n                     onClick={() => resetFilter({type: type, value: 'reset'})}>Reset</div>\r\n                }\r\n            </div>\r\n            {children}\r\n        </div>\r\n    )\r\n};\r\n\r\nCatalogFilterSection.propTypes = {\r\n    children: PropTypes.object,\r\n    type: PropTypes.string,\r\n    activeFilters: PropTypes.object,\r\n    resetFilter: PropTypes.func\r\n};\r\n\r\nexport default CatalogFilterSection;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport './catalog-filter.scss';\r\nimport Sizes from \"../sizes\";\r\nimport Colors from \"../colors\";\r\nimport CatalogFilterSection from \"./catalog-filter-section\";\r\n\r\nconst CatalogFilter = ({filters, addProductFilter, activeFilters, setMobileSidebar}) => {\r\n\r\n    const {size, color, brand} = filters;\r\n\r\n    return (\r\n        <div className='catalog__filter filter'>\r\n\r\n            <CatalogFilterSection type='brand' activeFilters={activeFilters} resetFilter={addProductFilter}>\r\n                <div className='brand'>\r\n                    {\r\n                        brand.map((value, idx) => {\r\n                            const itemClass = classNames(\r\n                                'brand__item',\r\n                                {'brand__item_active': activeFilters.brand.indexOf(value) !== -1,}\r\n                            );\r\n                            return (\r\n                                <div key={idx} className={itemClass}\r\n                                     onClick={() => addProductFilter({type: 'brand', value: value})}>\r\n                                    {value}\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </CatalogFilterSection>\r\n\r\n            <CatalogFilterSection type='color' activeFilters={activeFilters} resetFilter={addProductFilter}>\r\n                <Colors items={color} selected={activeFilters.color}\r\n                        onClickFunction={(value) => addProductFilter({type: 'color', value: value})}/>\r\n            </CatalogFilterSection>\r\n\r\n            <CatalogFilterSection type='size' activeFilters={activeFilters} resetFilter={addProductFilter}>\r\n                <Sizes items={size} selected={activeFilters.size}\r\n                       onClickFunction={(value) => addProductFilter({type: 'size', value: value})}/>\r\n            </CatalogFilterSection>\r\n\r\n            <button className='button filter__button' onClick={() => setMobileSidebar('')}>Filter</button>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nCatalogFilter.propTypes = {\r\n    filters: PropTypes.object,\r\n    activeFilters: PropTypes.object,\r\n    addProductFilter: PropTypes.func,\r\n    setMobileSidebar: PropTypes.func,\r\n};\r\n\r\nexport default CatalogFilter;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './catalog-sort.scss';\r\n\r\nconst CatalogSort = ({activeFilters, changeSortType, setMobileSidebar}) => {\r\n    return (\r\n        <div className='catalog__sort sort'>\r\n            <span className='sort__title'>sort by</span>\r\n            <select className='sort__select'\r\n                    value={activeFilters.sort}\r\n                    onChange={(e) => changeSortType(e.target.value)}>\r\n                <option value=\"priceASC\">price, a-z</option>\r\n                <option value=\"priceDESC\">price, z-a</option>\r\n                <option value=\"titleASC\">name, a-z</option>\r\n                <option value=\"titleDESC\">name, z-a</option>\r\n            </select>\r\n            <button className='sort__button button' onClick={() => setMobileSidebar('sidebar_mobile')}>Filters</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nCatalogSort.propTypes = {\r\n    activeFilters: PropTypes.object,\r\n    changeSortType: PropTypes.func,\r\n    setMobileSidebar: PropTypes.func,\r\n};\r\n\r\nexport default CatalogSort;","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './catalog.scss';\r\nimport classNames from \"classnames\";\r\nimport CatalogItem from \"./catalog-item\";\r\nimport CatalogFilter from \"./catalog-filter\";\r\nimport CatalogSort from \"./catalog-sort\";\r\n\r\n\r\nconst Catalog = ({helmets, filters, addProductFilter, activeFilters, changeSortType, showMore}) => {\r\n\r\n    const itemsPerPage = 8;\r\n    const allPages = Math.ceil(helmets.length / itemsPerPage);\r\n    const currentPage = activeFilters.currentPage;\r\n\r\n    const renderCatalogList = () => {\r\n        if (helmets.length === 0) {\r\n            return <div className='text-center'>There is nothing! Try changing your search criteria.</div>\r\n        } else {\r\n            return helmets.slice(0, currentPage * itemsPerPage).map(helmet => <CatalogItem helmet={helmet} key={helmet.id}/>)\r\n        }\r\n    };\r\n\r\n    const [mobileSidebar, setMobileSidebar] = useState('');\r\n    const className = classNames(`catalog__sidebar sidebar ${mobileSidebar}`);\r\n\r\n    return (\r\n        <div className='catalog'>\r\n            <div className={className}>\r\n                <CatalogFilter filters={filters} activeFilters={activeFilters} addProductFilter={addProductFilter} setMobileSidebar={setMobileSidebar}/>\r\n                <div className='menu__close' onClick={() => setMobileSidebar('')}/>\r\n            </div>\r\n            <div className='catalog__content content'>\r\n                <div className='catalog__top-block'>\r\n                    <div className='catalog__title'>\r\n                        {\r\n                            activeFilters.search ? `Results for '${activeFilters.search}'` :\r\n                            activeFilters.category ? activeFilters.category.split('-').join(' ') :\r\n                            'all helmets'\r\n                        }\r\n                    </div>\r\n                    <CatalogSort activeFilters={activeFilters}\r\n                                 changeSortType={changeSortType}\r\n                                 setMobileSidebar={setMobileSidebar}/>\r\n                </div>\r\n                <div className='catalog__list'>\r\n                    {renderCatalogList(helmets)}\r\n                </div>\r\n                {\r\n                    (currentPage < allPages) &&\r\n                    <button onClick={showMore} className='catalog__button button'>show more</button>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nCatalog.propTypes = {\r\n    helmets: PropTypes.array,\r\n    filters: PropTypes.object,\r\n    activeFilters: PropTypes.object,\r\n    addProductFilter: PropTypes.func,\r\n    changeSortType: PropTypes.func,\r\n    showMore: PropTypes.func,\r\n};\r\n\r\n\r\n\r\nexport default Catalog;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {\r\n    addProductFilter,\r\n    fetchHelmets,\r\n    fetchCategories,\r\n    fetchActiveCategory,\r\n    changeSortType,\r\n    clearSearch,\r\n    deleteAllFilters, showMore\r\n} from \"../actions\";\r\n\r\nimport {getFilteredHelmets, getFilters} from \"../selectors\";\r\n\r\nimport Spinner from \"../components/spinner\";\r\nimport ErrorIndicator from \"../components/error/error-indicator\";\r\nimport Catalog from \"../components/catalog/catalog\";\r\n\r\nclass CatalogPage extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.fetchHelmets();\r\n        this.props.fetchCategories();\r\n\r\n        let activeCategory = this.props.match.params.categoryName || '';\r\n        this.props.fetchActiveCategory(activeCategory)\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.match.params.categoryName !== prevProps.match.params.categoryName) {\r\n            this.props.fetchActiveCategory(this.props.match.params.categoryName || '')\r\n        }\r\n        //TODO: fix it\r\n        if (prevProps.location.pathname === '/search' && this.props.location.pathname !== '/search') {\r\n            this.props.clearSearch();\r\n        }\r\n        if (prevProps.location.pathname !== this.props.location.pathname) {\r\n            this.props.deleteAllFilters();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.clearSearch();\r\n    }\r\n\r\n    render() {\r\n\r\n        const {\r\n            isLoading,\r\n            isError,\r\n            filters,\r\n            addProductFilter,\r\n            filteredHelmets,\r\n            activeFilters,\r\n            changeSortType,\r\n            showMore,\r\n            location:{pathname},\r\n        } = this.props;\r\n\r\n        if (isLoading) {\r\n            return <Spinner/>\r\n        }\r\n        if (isError) {\r\n            return <ErrorIndicator/>\r\n        }\r\n\r\n        return (\r\n            <Catalog helmets={filteredHelmets}\r\n                     filters={filters}\r\n                     addProductFilter={addProductFilter}\r\n                     activeFilters={activeFilters}\r\n                     changeSortType={changeSortType}\r\n                     pathname={pathname}\r\n                     showMore={showMore}/>\r\n        )\r\n    }\r\n}\r\n\r\nCatalogPage.propTypes = {\r\n    isLoading: PropTypes.bool,\r\n    isError: PropTypes.bool,\r\n    filters: PropTypes.object,\r\n    addProductFilter: PropTypes.func,\r\n    filteredHelmets: PropTypes.array,\r\n    activeFilters: PropTypes.object,\r\n    changeSortType: PropTypes.func,\r\n    showMore: PropTypes.func,\r\n    pathname: PropTypes.string,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    const {catalog: {isLoading, isError}, activeFilters} = state;\r\n\r\n    return {\r\n        isLoading,\r\n        isError,\r\n        activeFilters,\r\n        filteredHelmets: getFilteredHelmets(state),\r\n        filters: getFilters(state),\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    fetchHelmets,\r\n    fetchCategories,\r\n    fetchActiveCategory,\r\n    addProductFilter,\r\n    deleteAllFilters,\r\n    changeSortType,\r\n    clearSearch,\r\n    showMore\r\n};\r\n\r\nexport default compose(\r\n    withRouter,\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(CatalogPage);","import React from 'react';\r\nimport './sizes.scss';\r\nimport classNames from \"classnames\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Sizes = ({items, selected, onClickFunction}) => {\r\n\r\n    if (!Array.isArray(selected)) selected = [selected];\r\n\r\n    return (\r\n        <div className='size'>\r\n            {\r\n                items.map((item, idx) => {\r\n                    const className = classNames('size__item', {'size__item_active': selected.indexOf(item) !== -1});\r\n                    return (\r\n                        <div key={idx} className={className} data-size={item}\r\n                             onClick={() => onClickFunction(item)}>\r\n                            {item}\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nSizes.propTypes = {\r\n    items: PropTypes.array,\r\n    selected: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\r\n    onClickFunction: PropTypes.func,\r\n};\r\n\r\nexport default Sizes;","import React from 'react';\r\nimport classNames from \"classnames\";\r\nimport PropTypes from 'prop-types';\r\nimport './colors.scss';\r\n\r\nconst Colors = ({items, selected, onClickFunction}) => {\r\n\r\n    if (!Array.isArray(selected)) selected = [selected];\r\n\r\n    return (\r\n        <div className='colors'>\r\n            {\r\n                items.map((item, idx) => {\r\n                    const className = classNames('colors__item', {'colors__item_active': selected.indexOf(item) !== -1});\r\n\r\n                    return (\r\n                        <div data-color={item}\r\n                             key={idx}\r\n                             className={className}\r\n                             onClick={() => onClickFunction(item)}/>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nColors.propTypes = {\r\n    items: PropTypes.array,\r\n    selected: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.array,\r\n    ]),\r\n    onClickFunction: PropTypes.func,\r\n};\r\n\r\nexport default Colors;"],"sourceRoot":""}